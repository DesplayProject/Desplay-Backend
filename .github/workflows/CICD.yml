name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build: 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          #architecture: aarch64
          # server-id: github 
          # settings-path: ${{ github.workspace }}

      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources 
          touch ./application.yml
          echo "${{ secrets.HOME_SERVER_APPLICATION }}" > ./application.yml
      
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run : ./gradlew clean build -x test

      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Cross builder
        run: docker buildx create --name cross-builder --driver docker-container --use
      - name: Build Docker
        run: docker buildx build --platform=linux/amd64,linux/arm64 -t ${{ secrets.DOCKERHUB_USERNAME }}/desplay --push .
      - name: Load Image 
        run: docker buildx build --platform=linux/arm64 -t ${{ secrets.DOCKERHUB_USERNAME }}/desplay:latest --load .
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/desplay:latest

      - name: Select blue green
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.HOME_SERVER_IP }}/api/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.HOME_SERVER_IP }}/api/env")
          else 
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else 
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
    
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOME_SERVER_IP }}
          username: ${{ secrets.HOME_SERVER_USERNAME }}
          password: ${{ secrets.HOME_SERVER_PASSWORD }}
          port: ${{ secrets.HOME_SERVER_PORT }}
          script_stop: true
          script: |
            docker ps -aq | grep -v $(docker ps -aqf "name=nginx-container") | xargs -r sudo docker rm -f
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/desplay:latest
            sudo chmod 755 /root
            cd /root && sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d
            sudo docker image prune -f
            
      - name: Change deploy server url
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.HOME_SERVER_IP }}:${{ env.STOPPED_PORT }}/api/env
          max-attempts: 30
          retry-deplay: 10s
          
      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOME_SERVER_IP }}
          username: ${{ secrets.HOME_SERVER_USERNAME }}
          password: ${{ secrets.HOME_SERVER_PASSWORD }}
          port: ${{ secrets.HOME_SERVER_PORT }}
          script_stop: true
          script: |
            sudo docker exec -i nginx-container bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'
            
      # - name: Stop current server
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOME_SERVER_IP }}
      #     username: ${{ secrets.HOME_SERVER_USERNAME }}
      #     password: ${{ secrets.HOME_SERVER_PASSWORD }}
      #     port: ${{ secrets.HOME_SERVER_PORT }}
      #     script_stop: true
      #     script: |
      #       sudo docker stop desplay-container-${{ env.CURRENT_UPSTREAM }}
      #       sudo docker rm desplay-container-${{ env.CURRENT_UPSTREAM }}
        
      
      
